-- USERS
create table public.users (
  id          uuid not null primary key, -- UUID from auth.users
  username    text,
  avatar      text,
  address     text,
  suburb      text,
  longitude   numeric,
  latitude    numeric,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at  timestamp with time zone default timezone('utc'::text, now()) not null
);
SELECT AddGeometryColumn ('','users','geom',4326,'POINT',2);

comment on table public.users is 'profile data for each user.';

alter table public.users enable row level security;

create policy "Public profiles are viewable by everyone."
  on public.users for select
  using ( true );

create policy "Users can insert their own profile."
  on public.users for insert
  with check ( auth.uid() = id );

create policy "Users can update own profile."
  on public.users for update
  using ( auth.uid() = id );

create table rest_areas (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  name text,
  reference text,
  region text,
  surface text,
  creator text,
  type text,
  bbq boolean default false,
  fuel boolean default false,
  lights boolean default false,
  showers boolean default false,
  toilets boolean default false,
  tables boolean default false,
  power boolean default false,
  wifi boolean default false,
  ligths boolean default false,
  ligthing_type text,
  water boolean default false,
  water_supply text,
  mobile_reception boolean default false,
  length integer,
  width integer,
  dangerous_bays integer default 0,
  dangerous_bays_available integer default 0,
  truck_bays integer default 0,
  truck_bays_available integer default 0,
  images text,
  cover_image text,
  longitude numeric,
  latitude numeric
);

SELECT AddGeometryColumn ('','rest_areas','geom',4326,'POINT',2);

create table ref_data (
  ref text primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  data text
);

CREATE TABLE bookmarks (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  rest_area_id bigint references rest_areas,
  user_id uuid references public.users not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (user_id, rest_area_id)
);

alter table public.bookmarks enable row level security;

create policy "Public bookmarks are viewable by everyone."
  on bookmarks for select
  using ( true );

create policy "Users can insert their own bookmarks."
  on bookmarks for insert
  with check ( auth.uid() = user_id );

create policy "Users can update own bookmarks."
  on bookmarks for update
  using ( auth.uid() = user_id );

create policy "Users can delete own bookmarks."
  on bookmarks for delete
  using ( auth.uid() = user_id );